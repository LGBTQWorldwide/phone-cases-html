<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Adidas 3D Model Collection – LGBTQWorldwide</title>
    <meta name="description" content="Explore the interactive 3D model of our exclusive Adidas collection by LGBTQWorldwide. View and rotate the premium design in your browser.">
    <meta name="keywords" content="Adidas 3D Model, LGBTQWorldwide, Adidas Collection, Interactive 3D Design, Premium Sneakers, LGBTQ Fashion, Adidas LGBTQ, 3D Fashion Models, Adidas Interactive Design">
    <meta name="author" content="LGBTQWorldwide">
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: transparent;
        }
        canvas {
            width: 100%;
            height: 100%;
            display: block;
        }
        body {
            cursor: grab;
        }
        body.grabbing {
            cursor: grabbing;
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <!-- Add GSAP for animation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.1/gsap.min.js"></script>

    <script>
        const modelUrl = 'https://raw.githubusercontent.com/LGBTQWorldwide/phonecases/refs/heads/main/1.gltf';

        function create3DInteraction(canvas) {
            const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setClearColor(0x000000, 0);

            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 0, 4); // Zurück zur ursprünglichen Position der Kamera
            camera.lookAt(0, 0, 0);

            // Entferne AmbientLight und ersetze durch SpotLights
            const spotlight1 = new THREE.SpotLight(0xFFFFFF, 2);
            spotlight1.position.set(10, 15, 10); // Licht weiter weg vom Objekt
            spotlight1.castShadow = true;
            spotlight1.target.position.set(0, 0, 0); // Das Ziel des Spotlights
            scene.add(spotlight1);

            const spotlight2 = new THREE.SpotLight(0xFFFFFF, 2);
            spotlight2.position.set(-10, 15, -10); // Licht weiter weg vom Objekt
            spotlight2.castShadow = true;
            spotlight2.target.position.set(0, 0, 0);
            scene.add(spotlight2);

            const spotlight3 = new THREE.SpotLight(0xFFFFFF, 1);
            spotlight3.position.set(0, -15, 10); // Licht weiter weg vom Objekt
            spotlight3.castShadow = true;
            spotlight3.target.position.set(0, 0, 0);
            scene.add(spotlight3);

            const loader = new THREE.GLTFLoader();
            loader.load(modelUrl, (gltf) => {
                const model = gltf.scene;
                model.scale.set(2, 2, 2); // Das Modell bleibt gleich groß
                model.position.set(0, 0, 0); // Modell bleibt in der ursprünglichen Position
                scene.add(model);

                let isMouseDown = false;
                let currentRotation = model.rotation.y;

                function onMouseMove(event) {
                    if (isMouseDown) {
                        const deltaMove = event.movementX;
                        currentRotation += deltaMove * 0.005;
                        currentRotation = currentRotation % (2 * Math.PI);
                        model.rotation.y = currentRotation;
                    }
                }

                // Add appear animation here using GSAP with delay
                gsap.fromTo(model.rotation, {
                    y: 0
                }, {
                    y: Math.PI * 6, // Rotate 3 full times (6 radians)
                    duration: 2,    // Duration of the rotation
                    ease: "power4.out", // Make the rotation slow down at the end
                    delay: 2, // Add a delay of 0.5 seconds before animation starts
                    repeat: 0, // No repeat
                    onComplete: () => {
                        // Optional: Code to trigger after the animation completes
                    }
                });

                canvas.addEventListener('pointerdown', (event) => {
                    isMouseDown = true;
                    canvas.setPointerCapture(event.pointerId);
                    document.body.classList.add('grabbing');
                });

                canvas.addEventListener('pointermove', onMouseMove);

                canvas.addEventListener('pointerup', (event) => {
                    isMouseDown = false;
                    canvas.releasePointerCapture(event.pointerId);
                    document.body.classList.remove('grabbing');
                });

                function animate() {
                    requestAnimationFrame(animate);
                    renderer.render(scene, camera);
                }
                animate();
            });

            window.addEventListener('resize', () => {
                renderer.setSize(window.innerWidth, window.innerHeight);
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
            });
        }

        const canvas = document.getElementById('canvas');
        create3DInteraction(canvas);
    </script>
</body>
</html>
